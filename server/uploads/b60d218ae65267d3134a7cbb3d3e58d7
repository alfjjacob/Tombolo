
router.post('/forgotPassword', [
  body('email')
    .matches(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$/).withMessage('Invalid E-mail'),
], (req, res) => {
  const errors = validationResult(req).formatWith(errorFormatter);
  if (!errors.isEmpty()) {
    return res.status(422).json({ success: false, errors: errors.array() });
  }

  try {    
    User.findOne({
      where: {
        email: req.body.email
      }      
    }).then(async user => {
      if(user == null) {  
        console.log("<<<< user not found")
        res.status(500).json({"success":"false", "message": "User not found."});
      }else{
      let application = await findApplication(req.body.clientId);
      if(application == null) {
        res.status(500).json({"success":"false", "message": "Application not found."});
      }else{
        PasswordReset.create({userid:user.id}).then((passwordReset) => {

          const token = jwt.sign({user: user.name, id: passwordReset.id}, privateKey, {expiresIn: "60m"} );

          const resetURL = `${req.body.resetUrl}/${token}`
         NotificationModule.sendPasswordResetLink(user.email,  user.firstName, user.lastName, resetURL).then(
           result => {
            //  console.log("<<<< Result after sending email ",  JSON.stringify(result))
             if(result.accepted){
               console.log("Password reset instructions sent")
               res.status(201).json({"success":"true"});
             }else{
               console.log("unable to send password reset instructions", result)
               return res.status(500).send({err : "Unable to send password reset instructions"});
             }
      });  
        })
 }}
      
    })
    //res.status(500).json({"success":"false"});
  } catch (err) {
    console.log('err', err);
  }
});  